pipeline {
    agent any

    environment {
        // This can be nexus3 or nexus2 server
        NEXUS_VERSION = "nexus3"
        // This can be http or https
        NEXUS_PROTOCOL = "http"
        // Where your Nexus is running
        NEXUS_URL = "3.109.95.73:8081/"
        // Repository where we will upload the artifact
        NEXUS_REPOSITORY_RELEASES = "maven-releases"
        NEXUS_REPOSITORY_SNAPSHOTS = "maven-snapshots"
        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = "nexus_user"
    }

    stages {
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

         stage('SonarQube Analytics') {
            steps {
                withSonarQubeEnv('Sonar') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Nexus Repository') {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                                nexusVersion: NEXUS_VERSION,
                                protocol: NEXUS_PROTOCOL,
                                nexusUrl: NEXUS_URL,
                                groupId: pom.groupId,
                                version: pom.version,
                                repository: NEXUS_REPOSITORY_SNAPSHOTS,
                                credentialsId: NEXUS_CREDENTIAL_ID,
                                artifacts: [
                                    [artifactId: pom.artifactId,
                                     classifier: '',
                                     file: artifactPath,
                                     type: pom.packaging],
                                    [artifactId: pom.artifactId,
                                     classifier: '',
                                     file: "pom.xml",
                                     type: "pom"]]);

                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }

            stage ('Setup Python virtual environment') {
              steps {
                sh '''
                  export HTTP_PROXY=http://10.123.123.123:8080
                  export HTTPS_PROXY=http://10.123.123.123:8080
                  python3 -m pip install --upgrade pip
                  python3 -m pip install --upgrade venv
                  python3 -m venv env
                  source env/bin/activate
                  python3 -m pip install --upgrade ansible molecule docker
                '''
              }
            }

            stage ('Display versions') {
              steps {
                sh '''
                  source env/bin/activate
                  docker -v
                  python -V
                  ansible --version
                  molecule --version
                '''
              }
            }

        stage ('Molecule test') {
              steps {
                sh '''
                  source env/bin/activate
                  cd infra/ansible/roles/tomcat
                  molecule test
                '''
              }
        }

        stage('Provision Environment') {
           steps {
             ansiblePlaybook(
                     playbook: 'infra/ansible/tomcat-setup.yml',
                     inventory: 'infra/ansible/inventories/develope/hosts',
                     credentialsId: 'ansible_ssh_private_key_file'
                     )
           }
        }
    }
}
